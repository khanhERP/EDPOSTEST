// Employees
  app.get(
    "/api/employees",
    tenantMiddleware,
    async (req: TenantRequest, res) => {
      try {
        console.log("üîç GET /api/employees - Starting request processing");

        // Proxy route for external CreateQRPos API
        app.post("/api/pos/create-qr-proxy", async (req, res) => {
          try {
            const { bankCode, clientID, ...qrRequest } = req.body;

            console.log("üéØ Proxying CreateQRPos request:", {
              qrRequest,
              bankCode,
              clientID,
            });
            console.log(
              "üåê Target URL:",
              `http://1.55.212.135:9335/api/CreateQRPos?bankCode=${bankCode}&clientID=${clientID}`,
            );

            // Forward request to external API (using HTTP as requested)
            const response = await fetch(
              `http://1.55.212.135:9335/api/CreateQRPos?bankCode=${bankCode}&clientID=${clientID}`,
              {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  Accept: "application/json",
                  "User-Agent": "EDPOS-System/1.0",
                },
                body: JSON.stringify(qrRequest),
              },
            );

            console.log("üì° External API response status:", response.status);
            console.log(
              "üì° External API response headers:",
              Object.fromEntries(response.headers.entries()),
            );

            const responseText = await response.text();
            console.log(
              "üì° External API raw response:",
              responseText.substring(0, 500),
            ); // Log first 500 chars

            // Check if response is HTML (error page)
            if (
              responseText.includes("<!DOCTYPE") ||
              responseText.includes("<html>")
            ) {
              console.error("‚ùå External API returned HTML instead of JSON");
              console.error(
                "‚ùå This usually means the API endpoint is incorrect or the server returned an error page",
              );
              return res.status(502).json({
                error: "External API returned HTML error page instead of JSON",
                details: "API endpoint may be incorrect or unavailable",
                apiUrl: `http://1.55.212.135:9335/api/CreateQRPos`,
              });
            }

            if (!response.ok) {
              console.error("‚ùå External API error:", responseText);
              return res.status(response.status).json({
                error: responseText,
                statusCode: response.status,
                statusText: response.statusText,
              });
            }

            let result;
            try {
              result = JSON.parse(responseText);
            } catch (parseError) {
              console.error(
                "‚ùå Failed to parse JSON from external API:",
                parseError,
              );
              return res.status(502).json({
                error: "Invalid JSON response from external API",
                rawResponse: responseText.substring(0, 200),
              });
            }

            console.log("‚úÖ External API success:", result);

            // Return the result
            res.json(result);
          } catch (error) {
            console.error("‚ùå Proxy API error:", error);

            // Provide more detailed error information
            if (error.code === "ECONNREFUSED") {
              return res.status(503).json({
                error: "Cannot connect to external API server",
                details: "Connection refused - API server may be down",
                apiUrl: "http://1.55.212.135:9335/api/CreateQRPos",
              });
            }

            if (error.code === "ENOTFOUND") {
              return res.status(503).json({
                error: "External API server not found",
                details: "DNS lookup failed - check API server address",
                apiUrl: "http://1.55.212.135:9335/api/CreateQRPos",
              });
            }

            res.status(500).json({
              error: "Internal server error while calling external API",
              details: error.message,
              errorType: error.constructor.name,
            });
          }
        });

        // Add missing /api/pos/create-qr route that fallback code is trying to call
        app.post("/api/pos/create-qr", async (req, res) => {
          try {
            const { bankCode, clientID } = req.query;
            const qrRequest = req.body;

            console.log("üéØ Fallback CreateQRPos request:", {
              qrRequest,
              bankCode,
              clientID,
            });

            // Forward to external API
            const response = await fetch(
              `http://1.55.212.135:9335/api/CreateQRPos?bankCode=${bankCode}&clientID=${clientID}`,
              {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  Accept: "application/json",
                  "User-Agent": "EDPOS-System/1.0",
                },
                body: JSON.stringify(qrRequest),
                timeout: 30000,
              },
            );

            const responseText = await response.text();
            console.log(
              "üì° External API raw response:",
              responseText.substring(0, 500),
            );

            if (!response.ok) {
              console.error(
                "‚ùå External API error:",
                response.status,
                responseText.substring(0, 200),
              );
              return res.status(response.status).json({
                error: responseText,
                statusCode: response.status,
                statusText: response.statusText,
              });
            }

            // Check if response looks like HTML (external API might be returning error page)
            if (
              responseText.trim().startsWith("<!DOCTYPE") ||
              responseText.trim().startsWith("<html")
            ) {
              console.error("‚ùå External API returned HTML instead of JSON");
              return res.status(502).json({
                error:
                  "External API returned HTML page instead of JSON response",
                rawResponse: responseText.substring(0, 200),
                suggestion:
                  "External API might be down or returning error page",
              });
            }

            let result;
            try {
              result = JSON.parse(responseText);
              console.log("‚úÖ External API JSON parsed successfully:", result);
            } catch (parseError) {
              console.error(
                "‚ùå Failed to parse external API response as JSON:",
                parseError,
              );
              return res.status(502).json({
                error: "Invalid JSON response from external API",
                rawResponse: responseText.substring(0, 200),
                parseError: parseError.message,
              });
            }

            res.json(result);
          } catch (error) {
            console.error("‚ùå Fallback CreateQRPos API error:", error);
            res.status(500).json({
              error: "Internal server error while calling external API",
              details: error.message,
            });
          }
        });

        let tenantDb;
        try {
          tenantDb = await getTenantDatabase(req);
          console.log("‚úÖ Tenant database connection obtained for employees");
        } catch (dbError) {
          console.error(
            "‚ùå Failed to get tenant database for employees:",
            dbError,
          );
          tenantDb = null;
        }

        const employees = await storage.getEmployees(tenantDb);
        console.log(`‚úÖ Successfully fetched ${employees.length} employees`);
        res.json(employees);
      } catch (error) {
        console.error("‚ùå Error fetching employees:", error);
        res.status(500).json({ message: "Failed to fetch employees" });
      }
    },
  );