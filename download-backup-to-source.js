
import { Pool } from 'pg';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// C·∫•u h√¨nh database connection
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

async function downloadBackupToSource() {
  const client = await pool.connect();
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const backupDir = path.join(__dirname, 'database-backup');
  const backupFile = path.join(backupDir, `backup-${timestamp}.sql`);
  const jsonBackupFile = path.join(backupDir, `backup-${timestamp}.json`);

  try {
    // T·∫°o th∆∞ m·ª•c backup n·∫øu ch∆∞a c√≥
    if (!fs.existsSync(backupDir)) {
      fs.mkdirSync(backupDir, { recursive: true });
    }

    console.log('üîÑ B·∫Øt ƒë·∫ßu t·∫£i backup database v·ªÅ source code...');
    console.log(`üìÅ Th∆∞ m·ª•c backup: ${backupDir}`);
    console.log(`üîó Database host: ep-dawn-cloud-a5kkn63y.us-east-2.aws.neon.tech`);

    let sqlDump = `-- Database Backup Generated on ${new Date().toISOString()}\n`;
    sqlDump += `-- Host: ep-dawn-cloud-a5kkn63y.us-east-2.aws.neon.tech\n`;
    sqlDump += `-- Database: neondb\n\n`;

    // Danh s√°ch c√°c b·∫£ng c·∫ßn backup
    const tables = [
      'categories',
      'products', 
      'employees',
      'tables',
      'orders',
      'order_items',
      'transactions',
      'transaction_items',
      'attendance_records',
      'store_settings',
      'suppliers',
      'customers',
      'point_transactions',
      'inventory_transactions',
      'einvoice_connections',
      'invoice_templates',
      'invoices',
      'invoice_items'
    ];

    const jsonData = {};

    // Backup t·ª´ng b·∫£ng
    for (const table of tables) {
      try {
        console.log(`üìã ƒêang backup b·∫£ng: ${table}`);

        // L·∫•y data t·ª´ b·∫£ng
        const dataResult = await client.query(`SELECT * FROM ${table}`);
        jsonData[table] = dataResult.rows;

        if (dataResult.rows.length > 0) {
          sqlDump += `\n-- Table: ${table} (${dataResult.rows.length} records)\n`;
          sqlDump += `DELETE FROM ${table};\n`;

          // T·∫°o INSERT statements
          const columns = Object.keys(dataResult.rows[0]);
          const columnList = columns.join(', ');

          for (const row of dataResult.rows) {
            const values = columns.map(col => {
              const value = row[col];
              if (value === null) return 'NULL';
              if (typeof value === 'string') return `'${value.replace(/'/g, "''")}'`;
              if (value instanceof Date) return `'${value.toISOString()}'`;
              if (typeof value === 'boolean') return value;
              return value;
            }).join(', ');

            sqlDump += `INSERT INTO ${table} (${columnList}) VALUES (${values});\n`;
          }

          sqlDump += '\n';
          console.log(`‚úÖ Backup b·∫£ng ${table}: ${dataResult.rows.length} records`);
        } else {
          console.log(`‚ö†Ô∏è B·∫£ng ${table} tr·ªëng`);
        }

      } catch (error) {
        console.log(`‚ùå Kh√¥ng th·ªÉ backup b·∫£ng ${table}:`, error.message);
        jsonData[table] = [];
      }
    }

    // Ghi file SQL backup v√†o source code
    fs.writeFileSync(backupFile, sqlDump, 'utf8');
    
    // Ghi file JSON backup v√†o source code  
    fs.writeFileSync(jsonBackupFile, JSON.stringify(jsonData, null, 2), 'utf8');

    console.log('‚úÖ T·∫£i backup ho√†n th√†nh!');
    console.log(`üìÅ File SQL: ${backupFile}`);
    console.log(`üìÑ File JSON: ${jsonBackupFile}`);
    console.log(`üìä K√≠ch th∆∞·ªõc SQL: ${(fs.statSync(backupFile).size / 1024 / 1024).toFixed(2)} MB`);
    console.log(`üìä K√≠ch th∆∞·ªõc JSON: ${(fs.statSync(jsonBackupFile).size / 1024 / 1024).toFixed(2)} MB`);

    // T·∫°o file th√¥ng tin backup
    const infoFile = path.join(backupDir, `backup-info-${timestamp}.txt`);
    const backupInfo = `
DATABASE BACKUP INFORMATION
===========================
Backup Date: ${new Date().toISOString()}
Host: ep-dawn-cloud-a5kkn63y.us-east-2.aws.neon.tech
Database: neondb
Username: neondb_owner

Files Created:
- SQL File: backup-${timestamp}.sql
- JSON File: backup-${timestamp}.json

Tables Backed Up:
${tables.map(table => `- ${table}: ${jsonData[table]?.length || 0} records`).join('\n')}

Total Records: ${Object.values(jsonData).reduce((sum, records) => sum + records.length, 0)}
`;

    fs.writeFileSync(infoFile, backupInfo, 'utf8');
    console.log(`üìã File th√¥ng tin: ${infoFile}`);

    return { 
      sqlFile: backupFile, 
      jsonFile: jsonBackupFile,
      infoFile: infoFile,
      backupDir: backupDir 
    };

  } catch (error) {
    console.error('‚ùå L·ªói t·∫£i backup:', error);
    throw error;
  } finally {
    client.release();
    await pool.end();
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (import.meta.url === `file://${process.argv[1]}`) {
  downloadBackupToSource().catch(console.error);
}

export { downloadBackupToSource };
