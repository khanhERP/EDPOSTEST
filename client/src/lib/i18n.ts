import { create } from 'zustand';
import { persist } from 'zustand/middleware';

export type Language = 'ko' | 'en' | 'vi';

interface LanguageStore {
  currentLanguage: Language;
  setLanguage: (language: Language) => void;
}

export const useLanguageStore = create<LanguageStore>()(
  persist(
    (set) => ({
      currentLanguage: 'ko',
      setLanguage: (language: Language) => set({ currentLanguage: language }),
    }),
    {
      name: 'pos-language',
    }
  )
);

// Comprehensive translation object for multilingual POS system
const translations = {
  ko: {
    // Common
    common: {
      loading: '로딩 중...',
      save: '저장',
      cancel: '취소',
      delete: '삭제',
      edit: '수정',
      add: '추가',
      search: '검색',
      filter: '필터',
      back: '뒤로',
      next: '다음',
      previous: '이전',
      confirm: '확인',
      success: '성공',
      error: '오류',
      warning: '경고',
      info: '정보',
      yes: '예',
      no: '아니오',
      items: '개',
      total: '총계',
      subtotal: '소계',
      tax: '세금',
      discount: '할인',
      date: '날짜',
      time: '시간',
      status: '상태',
      active: '활성',
      inactive: '비활성',
      name: '이름',
      description: '설명',
      price: '가격',
      quantity: '수량',
      actions: '작업',
    },
    // POS System
    pos: {
      title: 'POS 시스템',
      purchaseHistory: '구매 내역',
      emptyCart: '장바구니가 비어있습니다',
      addProductsToStart: '상품을 추가하여 시작하세요',
      clearCart: '장바구니 비우기',
      checkout: '결제',
      payment: '결제',
      cash: '현금',
      card: '카드',
      amountReceived: '받은 금액',
      change: '거스름돈',
      paymentMethod: '결제 방법',
      orderComplete: '주문 완료',
      printReceipt: '영수증 출력',
      newOrder: '새 주문',
    },
    // Tables
    tables: {
      title: '테이블 관리',
      description: '레스토랑 테이블 상태를 관리합니다',
      tableManagement: '테이블 관리',
      backToPOS: 'POS로 돌아가기',
      available: '사용 가능',
      occupied: '사용 중',
      reserved: '예약됨',
      maintenance: '점검 중',
      table: '테이블',
    },
    // Employees
    employees: {
      title: '직원 관리',
      description: '직원 정보를 관리합니다',
      employeeManagement: '직원 관리',
      addEmployee: '직원 추가',
      editEmployee: '직원 수정',
      employeeId: '직원 ID',
      email: '이메일',
      phone: '전화번호',
      role: '역할',
      manager: '매니저',
      cashier: '계산원',
      server: '서버',
      kitchen: '주방',
      hireDate: '입사일',
      isActive: '활성 상태',
      addEmployeeSuccess: '직원이 성공적으로 추가되었습니다',
      addEmployeeError: '직원 추가 중 오류가 발생했습니다',
      updateEmployeeSuccess: '직원 정보가 성공적으로 업데이트되었습니다',
      updateEmployeeError: '직원 정보 업데이트 중 오류가 발생했습니다',
    },
    // Attendance
    attendance: {
      title: '근태 관리',
      description: '직원 출퇴근을 관리합니다',
      clockInOut: '출퇴근',
      attendanceRecords: '출근 기록',
      statistics: '통계',
      clockIn: '출근',
      clockOut: '퇴근',
      breakStart: '휴식 시작',
      breakEnd: '휴식 종료',
      selectEmployee: '직원 선택',
      notes: '메모',
      recordsDescription: '일일 출근 기록을 확인하세요',
      selectedDate: '선택된 날짜',
      unknownEmployee: '알 수 없는 직원',
      status: {
        present: '출근',
        absent: '결근',
        late: '지각',
        halfDay: '반차',
      },
      clockInSuccess: '출근 처리 완료',
      clockInSuccessDesc: '성공적으로 출근 처리되었습니다',
      clockInError: '출근 처리 중 오류가 발생했습니다',
      clockOutSuccess: '퇴근 처리 완료',
      clockOutSuccessDesc: '성공적으로 퇴근 처리되었습니다',
      clockOutError: '퇴근 처리 중 오류가 발생했습니다',
      breakStartSuccess: '휴식 시작',
      breakStartSuccessDesc: '휴식이 시작되었습니다',
      breakStartError: '휴식 시작 중 오류가 발생했습니다',
      hours: '시간',
      minutes: '분',
      notesPlaceholder: '메모를 입력하세요',
      workingTime: '근무 시간',
      currentStatus: '현재 상태',
      refresh: '새로고침',
      clockInTime: '출근 시간',
      clockOutTime: '퇴근 시간',
      breakTime: '휴식 시간',
    },
    // Reports
    reports: {
      title: '보고서',
      description: '매출 및 운영 보고서를 확인하세요',
      dashboard: '대시보드',
      salesAnalysis: '매출 분석',
      menuAnalysis: '메뉴 분석',
      tableAnalysis: '테이블 분석',
      backToTables: '테이블로 돌아가기',
    },
    // Inventory
    inventory: {
      title: '재고 관리',
      description: '상품 재고를 관리합니다',
      lowStock: '재고 부족',
      outOfStock: '재고 없음',
      inStock: '재고 있음',
      stockLevel: '재고 수준',
      updateStock: '재고 업데이트',
    },
    // Suppliers
    suppliers: {
      createSuccess: '공급업체 생성 완료',
      createSuccessDesc: '공급업체가 성공적으로 생성되었습니다.',
      createFailed: '공급업체 생성 실패',
      createFailedDesc: '공급업체 생성 중 오류가 발생했습니다.',
      updateSuccess: '공급업체 업데이트 완료',
      updateSuccessDesc: '공급업체 정보가 성공적으로 업데이트되었습니다.',
      updateFailed: '공급업체 업데이트 실패',
    },
  },
  en: {
    // Common
    common: {
      loading: 'Loading...',
      save: 'Save',
      cancel: 'Cancel',
      delete: 'Delete',
      edit: 'Edit',
      add: 'Add',
      search: 'Search',
      filter: 'Filter',
      back: 'Back',
      next: 'Next',
      previous: 'Previous',
      confirm: 'Confirm',
      success: 'Success',
      error: 'Error',
      warning: 'Warning',
      info: 'Info',
      yes: 'Yes',
      no: 'No',
      items: 'items',
      total: 'Total',
      subtotal: 'Subtotal',
      tax: 'Tax',
      discount: 'Discount',
      date: 'Date',
      time: 'Time',
      status: 'Status',
      active: 'Active',
      inactive: 'Inactive',
      name: 'Name',
      description: 'Description',
      price: 'Price',
      quantity: 'Quantity',
      actions: 'Actions',
    },
    // POS System
    pos: {
      title: 'POS System',
      purchaseHistory: 'Purchase History',
      emptyCart: 'Cart is empty',
      addProductsToStart: 'Add products to get started',
      clearCart: 'Clear Cart',
      checkout: 'Checkout',
      payment: 'Payment',
      cash: 'Cash',
      card: 'Card',
      amountReceived: 'Amount Received',
      change: 'Change',
      paymentMethod: 'Payment Method',
      orderComplete: 'Order Complete',
      printReceipt: 'Print Receipt',
      newOrder: 'New Order',
    },
    // Tables
    tables: {
      title: 'Table Management',
      description: 'Manage restaurant table status',
      tableManagement: 'Table Management',
      backToPOS: 'Back to POS',
      available: 'Available',
      occupied: 'Occupied',
      reserved: 'Reserved',
      maintenance: 'Maintenance',
      table: 'Table',
    },
    // Employees
    employees: {
      title: 'Employee Management',
      description: 'Manage employee information',
      employeeManagement: 'Employee Management',
      addEmployee: 'Add Employee',
      editEmployee: 'Edit Employee',
      employeeId: 'Employee ID',
      email: 'Email',
      phone: 'Phone',
      role: 'Role',
      manager: 'Manager',
      cashier: 'Cashier',
      server: 'Server',
      kitchen: 'Kitchen',
      hireDate: 'Hire Date',
      isActive: 'Active Status',
      addEmployeeSuccess: 'Employee added successfully',
      addEmployeeError: 'Error adding employee',
      updateEmployeeSuccess: 'Employee updated successfully',
      updateEmployeeError: 'Error updating employee',
    },
    // Attendance
    attendance: {
      title: 'Attendance Management',
      description: 'Manage employee attendance',
      clockInOut: 'Clock In/Out',
      attendanceRecords: 'Attendance Records',
      statistics: 'Statistics',
      clockIn: 'Clock In',
      clockOut: 'Clock Out',
      breakStart: 'Start Break',
      breakEnd: 'End Break',
      selectEmployee: 'Select Employee',
      notes: 'Notes',
      recordsDescription: 'View daily attendance records',
      selectedDate: 'Selected Date',
      unknownEmployee: 'Unknown Employee',
      status: {
        present: 'Present',
        absent: 'Absent',
        late: 'Late',
        halfDay: 'Half Day',
      },
      clockInSuccess: 'Clocked In Successfully',
      clockInSuccessDesc: 'Employee has been clocked in successfully',
      clockInError: 'Error clocking in',
      clockOutSuccess: 'Clocked Out Successfully',
      clockOutSuccessDesc: 'Employee has been clocked out successfully',
      clockOutError: 'Error clocking out',
      breakStartSuccess: 'Break Started',
      breakStartSuccessDesc: 'Break has been started',
      breakStartError: 'Error starting break',
      hours: 'hours',
      minutes: 'minutes',
      notesPlaceholder: 'Enter notes',
      workingTime: 'Working Time',
      currentStatus: 'Current Status',
      refresh: 'Refresh',
      clockInTime: 'Clock In Time',
      clockOutTime: 'Clock Out Time',
      breakTime: 'Break Time',
    },
    // Reports
    reports: {
      title: 'Reports',
      description: 'View sales and operational reports',
      dashboard: 'Dashboard',
      salesAnalysis: 'Sales Analysis',
      menuAnalysis: 'Menu Analysis',
      tableAnalysis: 'Table Analysis',
      backToTables: 'Back to Tables',
    },
    // Inventory
    inventory: {
      title: 'Inventory Management',
      description: 'Manage product inventory',
      lowStock: 'Low Stock',
      outOfStock: 'Out of Stock',
      inStock: 'In Stock',
      stockLevel: 'Stock Level',
      updateStock: 'Update Stock',
    },
    // Suppliers
    suppliers: {
      createSuccess: 'Supplier Created',
      createSuccessDesc: 'Supplier has been created successfully.',
      createFailed: 'Supplier Creation Failed',
      createFailedDesc: 'An error occurred while creating the supplier.',
      updateSuccess: 'Supplier Updated',
      updateSuccessDesc: 'Supplier has been updated successfully.',
      updateFailed: 'Supplier Update Failed',
    },
  },
  vi: {
    // Common
    common: {
      loading: 'Đang tải...',
      save: 'Lưu',
      cancel: 'Hủy',
      delete: 'Xóa',
      edit: 'Sửa',
      add: 'Thêm',
      search: 'Tìm kiếm',
      filter: 'Lọc',
      back: 'Quay lại',
      next: 'Tiếp theo',
      previous: 'Trước',
      confirm: 'Xác nhận',
      success: 'Thành công',
      error: 'Lỗi',
      warning: 'Cảnh báo',
      info: 'Thông tin',
      yes: 'Có',
      no: 'Không',
      items: 'mục',
      total: 'Tổng cộng',
      subtotal: 'Tạm tính',
      tax: 'Thuế',
      discount: 'Giảm giá',
      date: 'Ngày',
      time: 'Thời gian',
      status: 'Trạng thái',
      active: 'Hoạt động',
      inactive: 'Không hoạt động',
      name: 'Tên',
      description: 'Mô tả',
      price: 'Giá',
      quantity: 'Số lượng',
      actions: 'Hành động',
    },
    // POS System
    pos: {
      title: 'Hệ thống POS',
      purchaseHistory: 'Lịch sử mua hàng',
      emptyCart: 'Giỏ hàng trống',
      addProductsToStart: 'Thêm sản phẩm để bắt đầu',
      clearCart: 'Xóa giỏ hàng',
      checkout: 'Thanh toán',
      payment: 'Thanh toán',
      cash: 'Tiền mặt',
      card: 'Thẻ',
      amountReceived: 'Số tiền nhận',
      change: 'Tiền thừa',
      paymentMethod: 'Phương thức thanh toán',
      orderComplete: 'Hoàn thành đơn hàng',
      printReceipt: 'In hóa đơn',
      newOrder: 'Đơn hàng mới',
    },
    // Tables
    tables: {
      title: 'Quản lý bàn',
      description: 'Quản lý trạng thái bàn nhà hàng',
      tableManagement: 'Quản lý bàn',
      backToPOS: 'Quay lại POS',
      available: 'Có sẵn',
      occupied: 'Đã sử dụng',
      reserved: 'Đã đặt',
      maintenance: 'Bảo trì',
      table: 'Bàn',
    },
    // Employees
    employees: {
      title: 'Quản lý nhân viên',
      description: 'Quản lý thông tin nhân viên',
      employeeManagement: 'Quản lý nhân viên',
      addEmployee: 'Thêm nhân viên',
      editEmployee: 'Sửa nhân viên',
      employeeId: 'ID nhân viên',
      email: 'Email',
      phone: 'Điện thoại',
      role: 'Vai trò',
      manager: 'Quản lý',
      cashier: 'Thu ngân',
      server: 'Phục vụ',
      kitchen: 'Bếp',
      hireDate: 'Ngày tuyển dụng',
      isActive: 'Trạng thái hoạt động',
      addEmployeeSuccess: 'Thêm nhân viên thành công',
      addEmployeeError: 'Lỗi khi thêm nhân viên',
      updateEmployeeSuccess: 'Cập nhật nhân viên thành công',
      updateEmployeeError: 'Lỗi khi cập nhật nhân viên',
    },
    // Attendance
    attendance: {
      title: 'Quản lý chấm công',
      description: 'Quản lý chấm công nhân viên',
      clockInOut: 'Chấm công',
      attendanceRecords: 'Bản ghi chấm công',
      statistics: 'Thống kê',
      clockIn: 'Chấm công vào',
      clockOut: 'Chấm công ra',
      breakStart: 'Bắt đầu nghỉ',
      breakEnd: 'Kết thúc nghỉ',
      selectEmployee: 'Chọn nhân viên',
      notes: 'Ghi chú',
      recordsDescription: 'Xem bản ghi chấm công hàng ngày',
      selectedDate: 'Ngày đã chọn',
      unknownEmployee: 'Nhân viên không xác định',
      status: {
        present: 'Có mặt',
        absent: 'Vắng mặt',
        late: 'Muộn',
        halfDay: 'Nửa ngày',
      },
      clockInSuccess: 'Chấm công vào thành công',
      clockInSuccessDesc: 'Nhân viên đã chấm công vào thành công',
      clockInError: 'Lỗi khi chấm công vào',
      clockOutSuccess: 'Chấm công ra thành công',
      clockOutSuccessDesc: 'Nhân viên đã chấm công ra thành công',
      clockOutError: 'Lỗi khi chấm công ra',
      breakStartSuccess: 'Bắt đầu nghỉ',
      breakStartSuccessDesc: 'Đã bắt đầu thời gian nghỉ',
      breakStartError: 'Lỗi khi bắt đầu nghỉ',
      hours: 'giờ',
      minutes: 'phút',
      notesPlaceholder: 'Nhập ghi chú',
      workingTime: 'Thời gian làm việc',
      currentStatus: 'Trạng thái hiện tại',
      refresh: 'Làm mới',
      clockInTime: 'Thời gian vào',
      clockOutTime: 'Thời gian ra',
      breakTime: 'Thời gian nghỉ',
    },
    // Reports
    reports: {
      title: 'Báo cáo',
      description: 'Xem báo cáo bán hàng và vận hành',
      dashboard: 'Bảng điều khiển',
      salesAnalysis: 'Phân tích bán hàng',
      menuAnalysis: 'Phân tích menu',
      tableAnalysis: 'Phân tích bàn',
      backToTables: 'Quay lại bàn',
    },
    // Inventory
    inventory: {
      title: 'Quản lý kho',
      description: 'Quản lý tồn kho sản phẩm',
      lowStock: 'Tồn kho thấp',
      outOfStock: 'Hết hàng',
      inStock: 'Còn hàng',
      stockLevel: 'Mức tồn kho',
      updateStock: 'Cập nhật tồn kho',
    },
    // Suppliers
    suppliers: {
      createSuccess: 'Tạo nhà cung cấp thành công',
      createSuccessDesc: 'Nhà cung cấp đã được tạo thành công.',
      createFailed: 'Tạo nhà cung cấp thất bại',
      createFailedDesc: 'Có lỗi xảy ra khi tạo nhà cung cấp.',
      updateSuccess: 'Cập nhật nhà cung cấp thành công',
      updateSuccessDesc: 'Nhà cung cấp đã được cập nhật thành công.',
      updateFailed: 'Cập nhật nhà cung cấp thất bại',
    },
  },
};

export function useTranslation() {
  const { currentLanguage } = useLanguageStore();

  const t = (key: string): string => {
    const keys = key.split('.');
    let value: any = translations[currentLanguage];
    
    for (const k of keys) {
      value = value?.[k];
    }
    
    return value || key;
  };

  return { t, currentLanguage };
}