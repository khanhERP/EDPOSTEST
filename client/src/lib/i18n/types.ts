export type Language = "ko" | "en" | "vi";

// Common translations interface
export interface CommonTranslations {
  loading: string;
  save: string;
  cancel: string;
  delete: string;
  edit: string;
  add: string;
  search: string;
  filter: string;
  back: string;
  next: string;
  previous: string;
  confirm: string;
  success: string;
  error: string;
  warning: string;
  info: string;
  yes: string;
  no: string;
  items: string;
  total: string;
  subtotal: string;
  tax: string;
  discount: string;
  date: string;
  time: string;
  status: string;
  active: string;
  inactive: string;
  name: string;
  description: string;
  price: string;
  quantity: string;
  notes: string;
  notesPlaceholder: string;
  autoGenerated: string;
  actions: string;
  collapse: string;
  expand: string;
  restaurant: string;
  noRecords: string;
  selectOtherDate: string;
  category: string;
  available: string;
  occupied: string;
  reserved: string;
  maintenance: string;
  clear: string;
  refresh: string;
  update: string;
  updating: string;
  create: string;
  creating: string;
  reset: string;
  export: string;
  import: string;
  select: string;
  selectAll: string;
  showing: string;
  for: string;
  noData: string;

  // Payment method modal
  selectPaymentMethod: string;
  totalAmount: string;
  cashPayment: string;
  qrBanking: string;
  close: string;
  scanQrPayment: string;
  amountToPay: string;
  useBankingApp: string;
  goBack: string;
  complete: string;
  customerAmount: string;
  enterCustomerAmount: string;
  change: string;
  insufficient: string;
  generatingQr: string;

  // Payment method names
  cash: string;
  creditCard: string;
  debitCard: string;
  momo: string;
  zalopay: string;
  vnpay: string;
  qrCode: string;
  shopeepay: string;
  grabpay: string;

  // Payment method descriptions
  visaMastercard: string;
  atmCard: string;
  momoWallet: string;
  zalopayWallet: string;
  vnpayWallet: string;
  qrBanking: string;
  shopeepayWallet: string;
  grabpayWallet: string;
  paymentMethodGeneric: string;
}

// Navigation translations interface
export interface NavigationTranslations {
  pos: string;
  tables: string;
  inventory: string;
  reports: string;
  employees: string;
  attendance: string;
  suppliers: string;
  salesReports: string;
  inventoryReports: string;
  expensesReports: string;
  profitReports: string;
  tablesSales: string;
  directSales: string;
}

// Reports translations interface
export interface ReportsTranslations {
  title: string;
  description: string;
  dashboard: string;
  dashboardDescription: string;
  salesAnalysis: string;
  menuAnalysis: string;
  tableAnalysis: string;
  backToTables: string;
  noPaymentData: string;

  // Date and time filters
  startDate: string;
  endDate: string;
  refresh: string;
  toDay: string;
  lastWeek: string;
  lastMonth: string;
  custom: string;
  filterOptions: string;

  // Dashboard metrics
  totalRevenue: string;
  totalOrders: string;
  totalCustomers: string;
  averageOrderValue: string;
  dailyAverage: string;
  activeOrders: string;
  occupiedTables: string;
  monthlyRevenue: string;
  uniqueProducts: string;
  credit_card: string;

  // Sales analysis
  analyzeRevenue: string;
  dailySales: string;
  paymentMethods: string;
  hourlyBreakdown: string;
  revenue: string;
  orders: string;
  customers: string;
  cash: string;
  card: string;

  // Menu analysis
  productPerformance: string;
  categoryPerformance: string;
  topSellingProducts: string;
  topRevenueProducts: string;
  menuItems: string;
  itemsSold: string;
  revenueShare: string;
  salesShare: string;
  rank: string;
  menuName: string;
  salesCount: string;
  popularMenuByQuantity: string;
  popularMenuByQuantityDesc: string;
  highRevenueMenu: string;
  highRevenueMenuDesc: string;
  noSalesData: string;
  noRevenueData: string;
  noCategoryData: string;

  // Table analysis specific
  customerCount: string;
  turnoverRate: string;
  topRevenueTables: string;
  topTurnoverTables: string;
  topUtilizationTables: string;
  timesPerDay: string;
  hourUnit: string;
  timesUnit: string;
  hour: string;
  times: string;

  // Additional keys
  endOfDayReport: string;
  endOfDayReportTab: string;
  revenueExpense: string;
  mainConcern: string;
  sales: string;
  inventory: string;
  summary: string;
  dateType: string;
  singleDate: string;
  dateRange: string;
  date: string;
  paymentMethodFilter: string;
  transactionTypeFilter: string;
  creator: string;
  employee: string;
  customerPayment: string;
  customerRefund: string;
  otherExpense: string;
  supplierRefund: string;
  supplierPayment: string;
  printReport: string;
  reportGenerated: string;
  dataFrom: string;
  to: string;
  printOptions: string;
  totalTransactions: string;
  income: string;
  expenses: string;
  netProfit: string;
  paymentMethodBreakdown: string;
  transactionDetails: string;
  transactionId: string;
  time: string;
  method: string;
  amount: string;
  notes: string;
  cashPayment: string;
  cardPayment: string;
  transfer: string;
  wallet: string;

  // Table detail headers
  salesDetailsHeader: string;
  revenueExpenseDetailsHeader: string;
  inventoryDetailsHeader: string;

  // Sales chart report
  salesChart: string;
  salesChartDescription: string;

  // Inventory report
  inventoryReport: string;
  inventoryReportDescription: string;
  productType: string;
  combo: string;
  product: string;
  service: string;
  inventoryValue: string;
  inOutInventory: string;
  detailedInOutInventory: string;
  disposal: string;
  employeeBySales: string;
  customerBySales: string;
  supplierByPurchase: string;
  profit: string;
  salesReportByProduct: string;
  profitReportByProduct: string;
  inventoryValueReport: string;
  inOutInventoryReport: string;
  detailedInOutInventoryReport: string;
  disposalReport: string;
  employeeSalesReport: string;
  customerSalesReport: string;
  supplierReportByProduct: string;
  quantitySold: string;
  returnQuantity: string;
  returnValue: string;
  netRevenue: string;
  totalCost: string;
  grossProfit: string;
  profitMargin: string;
  salePrice: string;
  saleValue: string;
  costPrice: string;
  inventoryValue: string;
  openingStock: string;
  openingValue: string;
  openingPrice: string;
  inQuantity: string;
  outQuantity: string;
  outValue: string;
  closingStock: string;
  closingValue: string;
  inSupplier: string;
  inCheck: string;
  inReturn: string;
  inTransfer: string;
  inProduction: string;
  outSale: string;
  outDisposal: string;
  outSupplier: string;
  outCheck: string;
  outTransfer: string;
  outProduction: string;
  totalDisposed: string;
  totalValue: string;
  employeeCount: string;
  customerCount: string;
  quantityPurchased: string;
  supplierCount: string;
  inValue: string;
  value: string;
  quantity: string;

  // Comprehensive sales report
  comprehensiveSalesReport: string;
  concernType: string;
  timeReport: string;
  profitReport: string;
  discountReport: string;
  returnReport: string;
  employeeReport: string;
  salesMethod: string;
  noDelivery: string;
  delivery: string;
  salesChannel: string;
  direct: string;
  other: string;
  timeSalesReport: string;
  profitByInvoiceReport: string;
  invoiceDiscountReport: string;
  returnByInvoiceReport: string;
  employeeSalesReport: string;
  returnValue: string;
  netRevenue: string;
  totalAmount: string;
  discount: string;
  totalCost: string;
  grossProfit: string;
  totalInvoices: string;
  invoiceValue: string;
  invoiceDiscount: string;
  returnTicketCount: string;
  seller: string;
  saleDate: string;
  paymentDate: string;
  fromDate: string;
  toDate: string;
  barChart: string;
  pieChart: string;
  lineChart: string;
  dailyRevenue: string;
  paymentMethodDistribution: string;
  hourlyRevenue: string;
  barChartDesc: string;
  pieChartDesc: string;
  lineChartDesc: string;
  paymentMethodDetails: string;

  // Table headers for reports
  transactionCode: string;
  quantity: string;
  otherRevenue: string;
  vat: string;
  actualRevenue: string;
  receiptCode: string;
  payerReceiver: string;
  revenueExpenseType: string;
  productCode: string;
  productName: string;
  soldQuantity: string;
  returnQuantity: string;
  returnValue: string;
  netRevenue: string;

  // Report specific content
  salesDetails: string;
  revenueExpenseDetails: string;
  inventoryDetails: string;
  noReportData: string;
  centralBranch: string;

  // Table headers for reports
  transactionCode: string;
  time: string;
  quantity: string;
  otherRevenue: string;
  vat: string;
  actualRevenue: string;
  receiptCode: string;
  payerReceiver: string;
  revenueExpenseType: string;
  productCode: string;
  productName: string;
  soldQuantity: string;
  returnQuantity: string;
  returnValue: string;
  netRevenue: string;

  // Report titles
  salesReportTitle: string;
  revenueReportTitle: string;
  inventoryReportTitle: string;
  summaryReportTitle: string;

  // Report specific content
  salesDetails: string;
  revenueExpenseDetails: string;
  inventoryDetails: string;
  noReportData: string;
  reportGenerated: string;
  centralBranch: string;

  // Date labels
  date: string;
  saleDate: string;
  paymentDate: string;
  fromDate: string;
  toDate: string;

  // Report titles
  salesReportTitle: string;
  revenueReportTitle: string;
  inventoryReportTitle: string;
  summaryReportTitle: string;

  // Table detail headers
  salesDetailsHeader: string;
  revenueExpenseDetailsHeader: string;
  inventoryDetailsHeader: string;

  // Table analysis
  tablePerformance: string;
  utilizationRate: string;
  turnoverRate: string;
  averageRevenue: string;
  peakHours: string;
  tableUtilization: string;
  revenuePerTable: string;
  ordersPerTable: string;

  // Common report elements
  period: string;
  thisMonth: string;
  noData: string;
  noDataDescription: string;
  loading: string;

  // Additional dashboard keys
  periodRevenue: string;
  customerCount: string;
  monthRevenue: string;
  monthAccumulated: string;
  realTimeStatus: string;
  pendingOrders: string;
  count: string;
  performanceMetrics: string;
  salesAchievementRate: string;
  hour: string;
  peakHour: string;
  tableTurnoverRate: string;
  times: string;
  targetAverageDailySales: string;
}

// Settings translations interface
export interface SettingsTranslations {
  title: string;
  description: string;
  storeInfo: string;
  categories: string;
  employees: string;
  basicInfo: string;
  basicInfoDesc: string;
  contactInfo: string;
  contactInfoDesc: string;
  operationHours: string;
  operationHoursDesc: string;
  storeName: string;
  storeCode: string;
  address: string;
  phone: string;
  email: string;
  website: string;
  openTime: string;
  closeTime: string;
  categoryManagement: string;
  categoryManagementDesc: string;
  goToCategories: string;
  categoriesRedirect: string;
  employeeManagement: string;
  employeeManagementDesc: string;
  goToEmployees: string;
  goToInventory: string;
  paymentMethodsDesc: string;
  availablePayments: string;
  addPayment: string;
  enabled: string;
  storeUpdated: string;
  updateError: string;
  paymentMethods: string;
  payments: {
    cash: string;
    creditCard: string;
    debitCard: string;
    momo: string;
    zalopay: string;
    vnpay: string;
    banking: string;
    shopeepay: string;
    grabpay: string;
    newPayment: string;
  };
  disabled: string;
  backToPos: string;
  storeNamePlaceholder: string;
  storeCodePlaceholder: string;
  taxId: string;
  taxIdLabel: string;
  taxIdPlaceholder: string;
  taxIdRequired: string;
  pinCodeLabel: string;
  loginIdLabel: string;
  passwordLabel: string;
  addressPlaceholder: string;
  phonePlaceholder: string;
  emailPlaceholder: string;
  productDeleteSuccess: string;
  // Product Management specific keys
  productTitle: string;
  addProduct: string;
  editProduct: string;
  allCategories: string;
  // E-invoice management
  einvoiceSetup: string;
  einvoiceDesc: string;
  connectionManagement: string;
  templateManagement: string;
  connectionsList: string;
  connectionsDesc: string;
  templatesDesc: string;
  addConnection: string;
  addConnectionTitle: string;
  addConnectionDesc: string;
  editConnectionTitle: string;
  editConnectionDesc: string;
  addTemplate: string;
  templateSymbol: string;
  templateIndex: string;
  templateName: string;
  templateNumber: string;
  templateCode: string;
  templateUsage: string;
  templateUsageStatus: string;
  templateNotes: string;
  templateSetDefault: string;
  addTemplateTitle: string;
  addTemplateDesc: string;
  editTemplateTitle: string;
  editTemplateDesc: string;
  templateNameLabel: string;
  templateNumberLabel: string;
  templateCodeLabel: string;
  templateSymbolLabel: string;
  templateDefault: string;
  operations: string;
  totalCategories: string;
  totalProducts: string;
  lowStock: string;
  outOfStock: string;
  totalValue: string;
  totalStockQuantity: string;
  categoryTitle: string;
  categoryName: string;
  categoryNamePlaceholder: string;
  categoryIcon: string;
  productName: string;
  productNamePlaceholder: string;
  productSku: string;
  productSkuPlaceholder: string;
  productCategory: string;
  productPrice: string;
  productPricePlaceholder: string;
  productStock: string;
  productStockPlaceholder: string;
  selectCategory: string;
  noCategories: string;
  noProducts: string;
  deleteConfirm: string;
  categoryDeleteConfirm: string;
  categoryCreateSuccess: string;
  categoryUpdateSuccess: string;
  categoryDeleteSuccess: string;
  productCreateSuccess: string;
  productUpdateSuccess: string;
  total: string;
  productsShowing: string;
  productNamePlaceholder: string;
  skuLabel: string;
  skuPlaceholder: string;
  priceLabel: string;
  pricePlaceholder: string;
  categoryLabel: string;
  categoryPlaceholder: string;
  initialStockQuantity: string;
  initialStockPlaceholder: string;
  stockQuantity: string;
  editReason: string;
  addNewStock: string;
  save: string;
  updateType: string;
  delete: string;
  confirmDelete: string;
  deleteFailed: string;
  createFailed: string;
  updateFailed: string;
}

// Not Found translations interface
export interface NotFoundTranslations {
  title: string;
  description: string;
  backHome: string;
  backToHome: string;
}

// Customers translations interface
export interface CustomersTranslations {
  title: string;
  description: string;
  customerManagement: string;
  addCustomer: string;
  editCustomer: string;
  deleteCustomer: string;
  searchPlaceholder: string;
  customerId: string;
  name: string;
  phone: string;
  email: string;
  visitCount: string;
  totalSpent: string;
  points: string;
  status: string;
  totalCustomers: string;
  activeCustomers: string;
  pointsIssued: string;
  averageSpent: string;
  customerFormTitle: string;
  customerFormDesc: string;
  customerAdded: string;
  customerUpdated: string;
  customerDeleted: string;
  customerError: string;
  namePlaceholder: string;
  phonePlaceholder: string;
  emailPlaceholder: string;
  addressPlaceholder: string;
  birthday: string;
  birthdayPlaceholder: string;
  gender: string;
  male: string;
  female: string;
  other: string;
  address: string;
  gold: string;
  silver: string;
  vip: string;
  total: string;
  totalCustomersRegistered: string;
  pointsManagement: string;
  membershipManagement: string;
  pointsManagementTitle: string;
  pointsManagementDesc: string;
  pointsAdjustment: string;
  pointsPayment: string;
  history: string;
  totalPoints: string;
  averagePoints: string;
  customers: string;
  pointsEditTitle: string;
  pointsEditDesc: string;
  customerSelection: string;
  searchCustomers: string;
  currentPoints: string;
  adjustmentType: string;
  addPoints: string;
  subtractPoints: string;
  setPoints: string;
  pointsToAdd: string;
  pointsToSubtract: string;
  pointsToSet: string;
  adjustmentReason: string;
  adjustmentReasonPlaceholder: string;
  processing: string;
  pointsPaymentTitle: string;
  pointsPaymentDesc: string;
  paymentCustomerSelection: string;
  availablePoints: string;
  pointsToUse: string;
  pointsToUsePlaceholder: string;
  insufficientPoints: string;
  pointsAfterPayment: string;
  processPayment: string;
  historyTitle: string;
  historyDesc: string;
  loadingHistory: string;
  noHistory: string;
  earned: string;
  redeemed: string;
  adjusted: string;
  expired: string;
  unknown: string;
  // Membership management
  membershipManagementTitle: string;
  membershipManagementDesc: string;
  membershipTierGuide: string;
  membershipLevel: string;
  membershipBenefits: string;
  minPurchaseAmount: string;
  basicLevel: string;
  basicLevelDesc: string;
  premiumLevel: string;
  premiumLevelDesc: string;
  vipLevel: string;
  vipLevelDesc: string;
  basicPointsEarning: string;
  birthdayDiscount5: string;
  pointsEarning15: string;
  birthdayDiscount10: string;
  freeDrinkMonthly: string;
  pointsEarning2x: string;
  birthdayDiscount20: string;
  freeDrink2Monthly: string;
  vipRoomAccess: string;
  customerMembershipManagement: string;
  autoUpgrade: string;
  filterByTier: string;
  upgradeAvailable: string;
  allTiers: string;
  close: string;
  pointManagement: string;
  pointManagementDescription: string;
  pointOverview: string;
  updatePoints: string;
  pointHistory: string;
  recentPointHistory: string;
  viewAllHistory: string;
  transactionType: string;
  selectTransactionType: string;
  enterPoints: string;
  reason: string;
  enterReason: string;
  processPoints: string;
  balance: string;
  previousBalance: string;
  noPointHistory: string;
  pointsUpdateFailed: string;
  pointsUpdateError: string;
}

// Employees translations interface
export interface EmployeesTranslations {
  title: string;
  description: string;
  employeeManagement: string;
  total: string;
  employeeList: string;
  confirmDelete: string;
  saving: string;
  save: string;
  add: string;
  currentEmployeeCount: string;
  updateEmployeeSuccess: string;
  updateEmployeeError: string;
  addEmployeeSuccess: string;
  addEmployee: string;
  editEmployee: string;
  deleteEmployee: string;
  searchPlaceholder: string;
  employeeId: string;
  name: string;
  role: string;
  phone: string;
  email: string;
  status: string;
  hireDate: string;
  salary: string;
  department: string;
  position: string;
  employeeFormTitle: string;
  employeeFormDesc: string;
  employeeAdded: string;
  employeeUpdated: string;
  employeeDeleted: string;
  employeeError: string;
  namePlaceholder: string;
  phonePlaceholder: string;
  emailPlaceholder: string;
  addEmployeeError: string;
  salaryPlaceholder: string;
  roles: {
    admin: string;
    manager: string;
    cashier: string;
    kitchen: string;
    server: string;
  };
  active: string;
  inactive: string;
  deleteSuccess: string;
  deleteError: string;
  emailAlreadyExists: string;
  emailAlreadyInSystem: string;
  selectRole: string;
  employeeIdRequired: string;
  nameRequired: string;
  emailInvalid: string;
}

// Attendance translations interface
export interface AttendanceTranslations {
  title: string;
  description: string;
  clockInOut: string;
  attendanceRecords: string;
  statistics: string;
  clockIn: string;
  clockOut: string;
  breakStart: string;
  breakEnd: string;
  selectEmployee: string;
  notes: string;
  recordsDescription: string;
  selectedDate: string;
  unknownEmployee: string;
  noRecords: string;
  selectOtherDate: string;
  clockInTime: string;
  clockOutTime: string;
  breakTime: string;
  totalHours: string;
  overtime: string;
  employeeSelect: string;
  currentStatus: string;
  refresh: string;
  qrAttendance: string;
  qrCodeTitle: string;
  qrCodeDescription: string;
  qrCodeInstructions: string;
  urlCopy: string;
  copySuccess: string;
  copySuccessDesc: string;
  breakEndSuccess: string;
  breakEndSuccessDesc: string;
  breakEndError: string;
  loading: string;
  noAttendanceData: string;
  selectEmployeeFirst: string;
  invalidEmployee: string;
  alreadyClockedIn: string;
  notClockedIn: string;
  alreadyOnBreak: string;
  notOnBreak: string;
  confirmClockOut: string;
  confirmBreakStart: string;
  confirmBreakEnd: string;
  processing: string;
  attendanceHistory: string;
  weeklyView: string;
  monthlyView: string;
  filterByEmployee: string;
  exportData: string;
  printReport: string;
  status: {
    present: string;
    absent: string;
    late: string;
    halfDay: string;
    working: string;
    onBreak: string;
    clockedOut: string;
  };
  clockInSuccess: string;
  clockInSuccessDesc: string;
  clockInError: string;
  clockOutSuccess: string;
  clockOutSuccessDesc: string;
  clockOutError: string;
  breakStartSuccess: string;
  breakStartSuccessDesc: string;
  breakStartError: string;
  breakEndSuccess: string;
  breakEndSuccessDesc: string;
  breakEndError: string;
  hours: string;
  minutes: string;
  notesPlaceholder: string;
  workingTime: string;
  monthlyStats: string;
  monthlyStatsDesc: string;
  selectMonth: string;
  monthPickerPlaceholder: string;
  totalWorkDays: string;
  totalAttendance: string;
  totalWorkHours: string;
  totalOvertime: string;
  averageWorkHours: string;
  dailyAverageWorkHours: string;
  attendanceRate: string;
  overallAttendanceRate: string;
  employeeStats: string;
  employeeStatsDesc: string;
  workDays: string;
  days: string;
  overtimeHours: string;
  lateCount: string;
  absentCount: string;
  times: string;
  monthlyStats: string;
  monthlyStatsDesc: string;
  selectMonth: string;
  totalWorkDays: string;
  totalAttendance: string;
  totalWorkHours: string;
  totalOvertime: string;
  averageWorkHours: string;
  dailyAverageWorkHours: string;
  attendanceRate: string;
  overallAttendanceRate: string;
  employeeStats: string;
  employeeStatsDesc: string;
  workDays: string;
  days: string;
  overtimeHours: string;
  lateCount: string;
  absentCount: string;
  times: string;
}

// Main translations interface
export interface OrdersTranslations {
  orderManagement: string;
  orderDetails: string;
  orderNumber: string;
  orderInfo: string;
  orderItems: string;
  orderStatus: string;
  orderTime: string;
  orderStatusUpdated: string;
  orderStatusUpdateFailed: string;
  viewDetails: string;
  confirm: string;
  startCooking: string;
  ready: string;
  served: string;
  table: string;
  customer: string;
  customerCount: string;
  customerName: string;
  noCustomerName: string;
  people: string;
  unknownTable: string;
  unknownProduct: string;
  memo: string;
  totalAmount: string;
  subtotal: string;
  tax: string;
  statusAndTime: string;
  realTimeOrderStatus: string;
  ordersInProgress: string;
  noActiveOrders: string;
  newOrdersWillAppearHere: string;
  noTableInfo: string;
  selectPaymentMethod: string;
  selectPaymentMethodDesc: string;
  cancel: string;
  pointsPaymentTitle: string;
  pointsPaymentDesc: string;
  searchCustomers: string;
  availablePoints: string;
  mixedPaymentTitle: string;
  mixedPaymentCancel: string;
  mixedPaymentDesc: string;
  mixedPaymentSummary: string;
  totalOrder: string;
  pointsPayment: string;
  remainingAmount: string;
  selectPaymentMethod: string;
  viewDetails: string;
  addMore: string;
  editOrder: string;
  editOrderTitle: string;
  editOrderDesc: string;
  addNewItems: string;
  previouslyOrdered: string;
  alreadyOrdered: string;
  newItemsToAdd: string;
  itemsAndNewItems: string;
  previousItems: string;
  newItems: string;
  updateOrder: string;
  updating: string;
  orderUpdateSuccess: string;
  orderUpdateSuccessDesc: string;
  noInput: string;
  pointsPaymentDialog: {
    title: string;
    description: string;
    orderInfo: string;
    orderCode: string;
    totalAmount: string;
    searchCustomer: string;
    searchPlaceholder: string;
    accumulatedPoints: string;
    mixedPayment: string;
  };
  paymentMethods: {
    cash: string;
    creditCard: string;
    debitCard: string;
    momo: string;
    zalopay: string;
    vnpay: string;
    qrCode: string;
    shopeepay: string;
    grabpay: string;
  };
  noTableInfo: string;
  payment: string;
  tableOrder: string;
  tableCapacity: string;
  orderPlaced: string;
  orderPlacedSuccess: string;
  status: {
    pending: string;
    confirmed: string;
    preparing: string;
    ready: string;
    served: string;
    paid: string;
    cancelled: string;
    delivering: string;
    completed: string;
  };
}

// Inventory translations interface
export interface InventoryTranslations {
  title: string;
  description: string;
  totalProducts: string;
  lowStock: string;
  outOfStock: string;
  totalValue: string;
  searchProducts: string;
  stockStatus: string;
  allStock: string;
  inStock: string;
  productName: string;
  currentStock: string;
  unitPrice: string;
  stockValue: string;
  management: string;
  edit: string;
  stockUpdate: string;
  loading: string;
  noProducts: string;
  uncategorized: string;
  currentStockLabel: string;
  stockUpdateType: string;
  quantity: string;
  notesOptional: string;
  selectUpdateType: string;
  addStock: string;
  subtractStock: string;
  setStock: string;
  quantityInput: string;
  changeReason: string;
  processing: string;
  addNewItem: string;
  newProduct: string;
  productNameLabel: string;
  productNamePlaceholder: string;
  skuLabel: string;
  skuPlaceholder: string;
  priceLabel: string;
  pricePlaceholder: string;
  categoryLabel: string;
  categoryPlaceholder: string;
  initialStockQuantity: string;
  initialStockPlaceholder: string;
  stockQuantity: string;
  editReason: string;
  addNewStock: string;
  save: string;
  updateType: string;
  delete: string;
  confirmDelete: string;
  deleteFailed: string;
  deleteFailedDescription: string;
  deleteSuccess: string;
  deleteSuccessDescription: string;
  createFailed: string;
  createFailedDescription: string;
  createSuccess: string;
  createSuccessDescription: string;
  updateFailed: string;
  updateFailedDescription: string;
  updateSuccess: string;
  updateSuccessDescription: string;
  duplicateSku: string;
  duplicateSkuDescription: string;
  quantityMinError: string;
  trackInventory: string;
}

// E-Invoice translations interface
export interface EInvoiceTranslations {
  title: string;
  description: string;
  invoiceNumber: string;
  invoiceDate: string;
  customerInfo: string;
  billingAddress: string;
  shippingAddress: string;
  items: string;
  description: string;
  quantity: string;
  unitPrice: string;
  amount: string;
  subtotal: string;
  taxAmount: string;
  totalAmount: string;
  paymentDetails: string;
  paymentMethod: string;
  paymentStatus: string;
  generated: string;
  paid: string;
  unpaid: string;
  viewInvoice: string;
  downloadInvoice: string;
  sendInvoice: string;
  invoiceGeneratedSuccess: string;
  invoiceGeneratedError: string;
  invoiceSentSuccess: string;
  invoiceSentError: string;
  invoiceDownloadError: string;
  addInvoiceItem: string;
  editInvoiceItem: string;
  deleteInvoiceItemConfirm: string;
  invoiceItemAdded: string;
  invoiceItemUpdated: string;
  invoiceItemDeleted: string;
  invoiceItemError: string;
  itemNamePlaceholder: string;
  itemDescriptionPlaceholder: string;
  quantityPlaceholder: string;
  unitPricePlaceholder: string;
  customerNamePlaceholder: string;
  billingAddressPlaceholder: string;
  shippingAddressPlaceholder: string;
  selectPaymentMethod: string;
  selectStatus: string;
  printInvoice: string;
  printPreview: string;
  saveAsDraft: string;
  send: string;
  preview: string;
  generate: string;
  customerDetails: string;
  billingDetails: string;
  shippingDetails: string;
  invoiceDetails: string;
  productName: string;
  itemCode: string;
  unit: string;
  total: string;
  discount: string;
  taxRate: string;
  taxDetails: string;
  additionalCharges: string;
  notes: string;
  termsAndConditions: string;
  companyName: string;
  companyAddress: string;
  companyPhone: string;
  companyEmail: string;
  companyTaxId: string;
  customerSignature: string;
  authorizedSignature: string;
  thankYouMessage: string;
  noInvoiceData: string;
  generating: string;
  sending: string;
  downloading: string;
  searchPlaceholder: string;
  invoiceList: string;
  filter: string;
  sort: string;
  invoiceNumberPlaceholder: string;
  dateFrom: string;
  dateTo: string;
  statusFilter: string;
  paymentMethodFilter: string;
  view: string;
  download: string;
  sendEmail: string;
  print: string;
  edit: string;
  delete: string;
  confirmDeleteInvoice: string;
  invoiceDeletedSuccess: string;
  invoiceDeletedError: string;
  filterOptions: string;
  selectDateRange: string;
  selectStatus: string;
  selectPaymentMethod: string;
  applyFilter: string;
  resetFilter: string;
  invalidInvoiceNumber: string;
  invalidCustomerInfo: string;
  invalidBillingAddress: string;
  invalidShippingAddress: string;
  invalidItemDetails: string;
  invalidPaymentDetails: string;
  enterItemName: string;
  enterQuantity: string;
  enterUnitPrice: string;
  enterCustomerName: string;
  enterBillingAddress: string;
  enterShippingAddress: string;
  enterPaymentMethod: string;
  enterStatus: string;
  enterNotes: string;
  enterTerms: string;
  updateInvoiceItem: string;
  addInvoice: string;
  createInvoice: string;
  newInvoice: string;
  invoiceFormTitle: string;
  invoiceFormDescription: string;
  invoiceAddedSuccess: string;
  invoiceUpdatedSuccess: string;
  invoiceError: string;
  selectProduct: string;
  noProductsFound: string;
  customerOrderHistory: string;
  invoiceHistory: string;
  selectCustomer: string;
  selectCustomerPlaceholder: string;
  addCustomer: string;
  editCustomer: string;
  addBillingAddress: string;
  addShippingAddress: string;
  manageCustomers: string;
  manageAddresses: string;
  updateInvoice: string;
  saveInvoice: string;
  processing: string;
  loading: string;
  noData: string;
  noDataDescription: string;
  updateSuccess: string;
  updateError: string;
  addSuccess: string;
  addError: string;
  deleteSuccess: string;
  deleteError: string;
  printPreviewError: string;
  cancel: string;
  publishing: string;
  checkout: string;
}


// POS translations interface
export interface POSTranslations {
  title: string;
  description: string;
  orderManagement: string;
  currentOrder: string;
  menu: string;
  categories: string;
  items: string;
  search: string;
  addToOrder: string;
  quantity: string;
  price: string;
  notes: string;
  notesPlaceholder: string;
  orderSummary: string;
  subtotal: string;
  tax: string;
  total: string;
  payment: string;
  checkout: string;
  pay: string;
  cash: string;
  card: string;
  momo: string;
  zalopay: string;
  vnpay: string;
  qrbanking: string;
  shopeepay: string;
  grabpay: string;
  points: string;
  cashPayment: string;
  cardPayment: string;
  momoPayment: string;
  zalopayPayment: string;
  vnpayPayment: string;
  qrbankingPayment: string;
  shopeepayPayment: string;
  grabpayPayment: string;
  pointsPayment: string;
  mixedPayment: string;
  selectPaymentMethod: string;
  selectPaymentMethodDesc: string;
  paymentSuccess: string;
  paymentFailed: string;
  orderPlaced: string;
  orderPlacedSuccess: string;
  orderPlacedFailed: string;
  newOrder: string;
  editOrder: string;
  cancelOrder: string;
  confirmCancelOrder: string;
  orderCancelled: string;
  orderCancelledFailed: string;
  printReceipt: string;
  printPreview: string;
  holdOrder: string;
  holdOrderSuccess: string;
  holdOrderFailed: string;
  retrieveOrder: string;
  noHeldOrders: string;
  placeOrder: string;
  updateOrder: string;
  updating: string;
  orderUpdateSuccess: string;
  orderUpdateSuccessDesc: string;
  orderUpdateFailed: string;
  addItems: string;
  removeItems: string;
  changeQuantity: string;
  applyChanges: string;
  noItemsInOrder: string;
  customer: string;
  selectCustomer: string;
  selectCustomerPlaceholder: string;
  addCustomer: string;
  customerAddedSuccess: string;
  customerAddedFailed: string;
  customerUpdatedSuccess: string;
  customerUpdatedFailed: string;
  table: string;
  selectTable: string;
  selectTablePlaceholder: string;
  addTable: string;
  tableAddedSuccess: string;
  tableAddedFailed: string;
  tableUpdatedSuccess: string;
  tableUpdatedFailed: string;
  menuItemDetails: string;
  itemDetails: string;
  itemDescription: string;
  itemPrice: string;
  itemQuantity: string;
  itemNotes: string;
  itemNotesPlaceholder: string;
  itemRemove: string;
  itemEdit: string;
  orderId: string;
  orderTime: string;
  orderStatus: string;
  orderStatusUpdated: string;
  orderStatusUpdateFailed: string;
  processing: string;
  loading: string;
  noData: string;
  noDataDescription: string;
  updateSuccess: string;
  updateError: string;
  addSuccess: string;
  addError: string;
  deleteSuccess: string;
  deleteError: string;
  quantityMinError: string;
  invalidItem: string;
  invalidCustomer: string;
  invalidTable: string;
  invalidPayment: string;
  confirmPayment: string;
  confirmPaymentDesc: string;
  orderTotal: string;
  amountPaid: string;
  changeDue: string;
  close: string;
  print: string;
  receiptPreview: string;
  thankYouMessage: string;
  duplicateItem: string;
  itemAlreadyInOrder: string;
  addAnotherItem: string;
  selectCategory: string;
  selectCategoryPlaceholder: string;
  viewOrder: string;
  orderInprogress: string;
  noActiveOrders: string;
  newOrdersWillAppearHere: string;
  orderSummaryDesc: string;
  applyDiscount: string;
  discountPlaceholder: string;
  invalidDiscount: string;
  discountApplied: string;
  discountRemoved: string;
  clearDiscount: string;
  editItem: string;
  editItemTitle: string;
  editItemDescription: string;
  editItemPrice: string;
  editItemQuantity: string;
  editItemNotes: string;
  editItemNotesPlaceholder: string;
  saveChanges: string;
  cancelEditing: string;
  remove: string;
  confirmRemoveItem: string;
  itemRemoved: string;
  itemRemoveFailed: string;
  clearOrder: string;
  confirmClearOrder: string;
  orderCleared: string;
  orderClearFailed: string;
  stickyFooter: string;
  stickyFooterDescription: string;
  stickyFooterOrderUpdated: string;
  stickyFooterOrderUpdateFailed: string;
  stickyFooterOrderPlaced: string;
  stickyFooterOrderPlaceFailed: string;
}

// Suppliers translations interface
export interface SuppliersTranslations {
  title: string;
  description: string;
  supplierManagement: string;
  addSupplier: string;
  editSupplier: string;
  deleteSupplier: string;
  searchPlaceholder: string;
  supplierId: string;
  name: string;
  contactPerson: string;
  phone: string;
  email: string;
  address: string;
  totalPurchases: string;
  lastPurchaseDate: string;
  supplierFormTitle: string;
  supplierFormDesc: string;
  supplierAdded: string;
  supplierUpdated: string;
  supplierDeleted: string;
  supplierError: string;
  namePlaceholder: string;
  contactPersonPlaceholder: string;
  phonePlaceholder: string;
  emailPlaceholder: string;
  addressPlaceholder: string;
  supplierAddedError: string;
  supplierUpdateError: string;
  supplierDeleteError: string;
  supplierList: string;
  totalSuppliers: string;
  activeSuppliers: string;
  supplierDetails: string;
  purchaseHistory: string;
  noPurchaseHistory: string;
  supplierDetailsTitle: string;
  supplierDetailsDescription: string;
  purchaseHistoryTitle: string;
  purchaseHistoryDescription: string;
  purchaseDetails: string;
  productName: string;
  quantity: string;
  unitPrice: string;
  totalAmount: string;
  purchaseDate: string;
  purchaseId: string;
  supplierName: string;
  supplierPhone: string;
  supplierEmail: string;
  supplierAddress: string;
  viewDetails: string;
  recentPurchases: string;
  purchaseDetailsTitle: string;
  purchaseDetailsDescription: string;
  purchaseDetailsError: string;
  noSupplierData: string;
  loading: string;
  noData: string;
  noDataDescription: string;
  updateSuccess: string;
  updateError: string;
  addSuccess: string;
  addError: string;
  deleteSuccess: string;
  deleteError: string;
}

// Type-safe translation keys
export type TranslationKey =
  | `common.${keyof CommonTranslations}`
  | `nav.${keyof NavigationTranslations}`
  | `tables.${keyof TablesTranslations}`
  | `inventory.${keyof InventoryTranslations}`
  | `orders.${keyof OrdersTranslations}`
  | `employees.${keyof EmployeesTranslations}`
  | `attendance.${keyof AttendanceTranslations}`
  | `settings.${keyof SettingsTranslations}`
  | `customers.${keyof CustomersTranslations}`
  | `reports.${keyof ReportsTranslations}`
  | `notFound.${keyof NotFoundTranslations}`
  | `einvoice.${keyof EInvoiceTranslations}`
  | `pos.${keyof POSTranslations}`
  | `suppliers.${keyof SuppliersTranslations}`;

// Language-specific translations type
export interface LanguageTranslations {
  ko: { [key: string]: any };
  en: { [key: string]: any };
  vi: { [key: string]: any };
}